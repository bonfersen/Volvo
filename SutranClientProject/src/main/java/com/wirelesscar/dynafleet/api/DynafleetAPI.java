package com.wirelesscar.dynafleet.api;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import com.sutran.client.util.SutranClientConstants;

import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.18
 * 2017-06-30T14:30:13.690-05:00
 * Generated source version: 2.7.18
 * 
 */
@WebServiceClient(name = "DynafleetAPI", 
                  wsdlLocation = SutranClientConstants.WEBSERVICE_DYNAFLEET_URL,
                  targetNamespace = "http://wirelesscar.com/dynafleet/api") 
public class DynafleetAPI extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://wirelesscar.com/dynafleet/api", "DynafleetAPI");
    public final static QName MessageServicePort = new QName("http://wirelesscar.com/dynafleet/api", "MessageServicePort");
    public final static QName GeofenceServicePort = new QName("http://wirelesscar.com/dynafleet/api", "GeofenceServicePort");
    public final static QName TransportCustomerServicePort = new QName("http://wirelesscar.com/dynafleet/api", "TransportCustomerServicePort");
    public final static QName PoiServicePort = new QName("http://wirelesscar.com/dynafleet/api", "PoiServicePort");
    public final static QName OrderServicePort = new QName("http://wirelesscar.com/dynafleet/api", "OrderServicePort");
    public final static QName TrackingServicePort = new QName("http://wirelesscar.com/dynafleet/api", "TrackingServicePort");
    public final static QName FormMessageServicePort = new QName("http://wirelesscar.com/dynafleet/api", "FormMessageServicePort");
    public final static QName DTMServicePort = new QName("http://wirelesscar.com/dynafleet/api", "DTMServicePort");
    public final static QName LoginServicePort = new QName("http://wirelesscar.com/dynafleet/api", "LoginServicePort");
    public final static QName VehicleAndDriverAdminServicePort = new QName("http://wirelesscar.com/dynafleet/api", "VehicleAndDriverAdminServicePort");
    public final static QName ServicePlanServicePort = new QName("http://wirelesscar.com/dynafleet/api", "ServicePlanServicePort");
    public final static QName ReportServicePort = new QName("http://wirelesscar.com/dynafleet/api", "ReportServicePort");
    public final static QName NotificationServicePort = new QName("http://wirelesscar.com/dynafleet/api", "NotificationServicePort");
    public final static QName FormServicePort = new QName("http://wirelesscar.com/dynafleet/api", "FormServicePort");
    static {
        URL url = null;
        try {
            url = new URL(SutranClientConstants.WEBSERVICE_DYNAFLEET_URL);
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(DynafleetAPI.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", SutranClientConstants.WEBSERVICE_DYNAFLEET_URL);
        }
        WSDL_LOCATION = url;
    }

    public DynafleetAPI(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public DynafleetAPI(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public DynafleetAPI() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns MessageService
     */
    @WebEndpoint(name = "MessageServicePort")
    public MessageService getMessageServicePort() {
        return super.getPort(MessageServicePort, MessageService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MessageService
     */
    @WebEndpoint(name = "MessageServicePort")
    public MessageService getMessageServicePort(WebServiceFeature... features) {
        return super.getPort(MessageServicePort, MessageService.class, features);
    }
    /**
     *
     * @return
     *     returns GeofenceService
     */
    @WebEndpoint(name = "GeofenceServicePort")
    public GeofenceService getGeofenceServicePort() {
        return super.getPort(GeofenceServicePort, GeofenceService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GeofenceService
     */
    @WebEndpoint(name = "GeofenceServicePort")
    public GeofenceService getGeofenceServicePort(WebServiceFeature... features) {
        return super.getPort(GeofenceServicePort, GeofenceService.class, features);
    }
    /**
     *
     * @return
     *     returns TransportCustomerService
     */
    @WebEndpoint(name = "TransportCustomerServicePort")
    public TransportCustomerService getTransportCustomerServicePort() {
        return super.getPort(TransportCustomerServicePort, TransportCustomerService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TransportCustomerService
     */
    @WebEndpoint(name = "TransportCustomerServicePort")
    public TransportCustomerService getTransportCustomerServicePort(WebServiceFeature... features) {
        return super.getPort(TransportCustomerServicePort, TransportCustomerService.class, features);
    }
    /**
     *
     * @return
     *     returns PoiService
     */
    @WebEndpoint(name = "PoiServicePort")
    public PoiService getPoiServicePort() {
        return super.getPort(PoiServicePort, PoiService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PoiService
     */
    @WebEndpoint(name = "PoiServicePort")
    public PoiService getPoiServicePort(WebServiceFeature... features) {
        return super.getPort(PoiServicePort, PoiService.class, features);
    }
    /**
     *
     * @return
     *     returns OrderService
     */
    @WebEndpoint(name = "OrderServicePort")
    public OrderService getOrderServicePort() {
        return super.getPort(OrderServicePort, OrderService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OrderService
     */
    @WebEndpoint(name = "OrderServicePort")
    public OrderService getOrderServicePort(WebServiceFeature... features) {
        return super.getPort(OrderServicePort, OrderService.class, features);
    }
    /**
     *
     * @return
     *     returns TrackingService
     */
    @WebEndpoint(name = "TrackingServicePort")
    public TrackingService getTrackingServicePort() {
        return super.getPort(TrackingServicePort, TrackingService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TrackingService
     */
    @WebEndpoint(name = "TrackingServicePort")
    public TrackingService getTrackingServicePort(WebServiceFeature... features) {
        return super.getPort(TrackingServicePort, TrackingService.class, features);
    }
    /**
     *
     * @return
     *     returns FormMessageService
     */
    @WebEndpoint(name = "FormMessageServicePort")
    public FormMessageService getFormMessageServicePort() {
        return super.getPort(FormMessageServicePort, FormMessageService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns FormMessageService
     */
    @WebEndpoint(name = "FormMessageServicePort")
    public FormMessageService getFormMessageServicePort(WebServiceFeature... features) {
        return super.getPort(FormMessageServicePort, FormMessageService.class, features);
    }
    /**
     *
     * @return
     *     returns DTMService
     */
    @WebEndpoint(name = "DTMServicePort")
    public DTMService getDTMServicePort() {
        return super.getPort(DTMServicePort, DTMService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DTMService
     */
    @WebEndpoint(name = "DTMServicePort")
    public DTMService getDTMServicePort(WebServiceFeature... features) {
        return super.getPort(DTMServicePort, DTMService.class, features);
    }
    /**
     *
     * @return
     *     returns LoginService
     */
    @WebEndpoint(name = "LoginServicePort")
    public LoginService getLoginServicePort() {
        return super.getPort(LoginServicePort, LoginService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LoginService
     */
    @WebEndpoint(name = "LoginServicePort")
    public LoginService getLoginServicePort(WebServiceFeature... features) {
        return super.getPort(LoginServicePort, LoginService.class, features);
    }
    /**
     *
     * @return
     *     returns VehicleAndDriverAdminService
     */
    @WebEndpoint(name = "VehicleAndDriverAdminServicePort")
    public VehicleAndDriverAdminService getVehicleAndDriverAdminServicePort() {
        return super.getPort(VehicleAndDriverAdminServicePort, VehicleAndDriverAdminService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns VehicleAndDriverAdminService
     */
    @WebEndpoint(name = "VehicleAndDriverAdminServicePort")
    public VehicleAndDriverAdminService getVehicleAndDriverAdminServicePort(WebServiceFeature... features) {
        return super.getPort(VehicleAndDriverAdminServicePort, VehicleAndDriverAdminService.class, features);
    }
    /**
     *
     * @return
     *     returns ServicePlanService
     */
    @WebEndpoint(name = "ServicePlanServicePort")
    public ServicePlanService getServicePlanServicePort() {
        return super.getPort(ServicePlanServicePort, ServicePlanService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ServicePlanService
     */
    @WebEndpoint(name = "ServicePlanServicePort")
    public ServicePlanService getServicePlanServicePort(WebServiceFeature... features) {
        return super.getPort(ServicePlanServicePort, ServicePlanService.class, features);
    }
    /**
     *
     * @return
     *     returns ReportService
     */
    @WebEndpoint(name = "ReportServicePort")
    public ReportService getReportServicePort() {
        return super.getPort(ReportServicePort, ReportService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ReportService
     */
    @WebEndpoint(name = "ReportServicePort")
    public ReportService getReportServicePort(WebServiceFeature... features) {
        return super.getPort(ReportServicePort, ReportService.class, features);
    }
    /**
     *
     * @return
     *     returns NotificationService
     */
    @WebEndpoint(name = "NotificationServicePort")
    public NotificationService getNotificationServicePort() {
        return super.getPort(NotificationServicePort, NotificationService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NotificationService
     */
    @WebEndpoint(name = "NotificationServicePort")
    public NotificationService getNotificationServicePort(WebServiceFeature... features) {
        return super.getPort(NotificationServicePort, NotificationService.class, features);
    }
    /**
     *
     * @return
     *     returns FormService
     */
    @WebEndpoint(name = "FormServicePort")
    public FormService getFormServicePort() {
        return super.getPort(FormServicePort, FormService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns FormService
     */
    @WebEndpoint(name = "FormServicePort")
    public FormService getFormServicePort(WebServiceFeature... features) {
        return super.getPort(FormServicePort, FormService.class, features);
    }

}
